generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  emailVerified     DateTime?
  verificationToken String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Add user relationship to transactions
  transactions      Transaction[]
  auditLogs         AuditLog[]
  consents          Consent[]
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Encrypted sensitive fields
  encryptedAmount     String   // Encrypted amount
  encryptedDescription String  // Encrypted description
  type        String   // 'income' or 'expense'
  category    String?  // 'personal' or 'business'
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categorizationAttempts CategorizationAttempt[]
}

model CategorizationAttempt {
  id            String   @id @default(cuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  aiCategory    String
  userCategory  String?
  isCorrect     Boolean?
  createdAt     DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  action    String   // 'create', 'read', 'update', 'delete'
  resource  String   // 'transaction', 'user', 'consent', etc.
  resourceId String? // ID of the resource being acted upon
  details   String?  // Additional details in JSON format
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  @@index([userId, timestamp])
  @@index([resource, resourceId])
}

model Consent {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  type        String   // 'privacy_policy', 'terms_of_service', 'data_usage', 'marketing'
  version     String   // Version of the policy/terms
  consented   Boolean  @default(true) // true for consent given, false for withdrawal
  consentDate DateTime @default(now())
  withdrawalDate DateTime?
  ipAddress   String?
  userAgent   String?

  @@unique([userId, type, version])
  @@index([userId, type])
}
